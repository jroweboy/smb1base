MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "";
    SP:     start = $0100,  size = $0100, type = rw, file = "";
    OAM:    start = $0200,  size = $0100, type = rw, file = "";
    RAM:    start = $0300,  size = $0500, type = rw, file = "";
    HDR:    start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;

    # TODO think of a system to define the banks in code?
    # Define new memory banks here
    # PRGLow: start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 0;
    # PRG_A0: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 1;
    # PRG_C0: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 2;
    # PRGLast:start = $e000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 3;

    PRGA_00:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $00;
    PRGA_01:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $01;
    PRGA_02:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $02;
    PRGA_03:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $03;
    PRGA_04:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $04;
    # blank space in my hack. i've set it up for bankable dpcm though
    PRGC_00:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $05;
    PRGC_01:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $06;
    PRGC_02:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $07;
    PRGC_03:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $08;
    PRGC_04:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $09;
    PRGC_05:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0a;
    PRGC_06:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0b;
    PRGC_07:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0c;
    PRGC_08:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0d;
    PRGC_09:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0e;
    PRGC_0a:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0f;

    PRGLow: start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $fe;
    PRGFix: start = $e000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $ff;

    CHR:    start = $0000,  size = $12000, type = ro, fill = yes, file = %O, fillval = $00;
}

SEGMENTS {
    INESHDR:    load = HDR,     type = ro;
    ZEROPAGE:   load = ZP,      type = zp;
    STACK:      load = SP,      type = bss;
    OAM:        load = OAM,     type = bss;
    BSS:        load = RAM,     type = bss;

    # User created code defaults to the first A0 bank
    OBJECT:     load = PRGA_00, type = ro;
    PLAYER:     load = PRGA_01, type = ro;
    MUSIC:      load = PRGA_01, type = ro;
    LEVEL:      load = PRGA_02, type = ro;
    COS_TABLE:  load = PRGA_03, type = ro;
    SIN_TABLE:  load = PRGA_04, type = ro;
    DPCM_00:    load = PRGC_00, type = ro, define=yes;
    DPCM_01:    load = PRGC_01, type = ro, define=yes;
    DPCM_02:    load = PRGC_02, type = ro, define=yes;
    DPCM_03:    load = PRGC_03, type = ro, define=yes;
    DPCM_04:    load = PRGC_04, type = ro, define=yes;
    DPCM_05:    load = PRGC_05, type = ro, define=yes;
    DPCM_06:    load = PRGC_06, type = ro, define=yes;
    DPCM_07:    load = PRGC_07, type = ro, define=yes;
    DPCM_08:    load = PRGC_08, type = ro, define=yes;
    DPCM_09:    load = PRGC_09, type = ro, define=yes;
    DPCM_0a:    load = PRGC_0a, type = ro, define=yes;

    CODE:       load = PRGLow, type = ro;
    LOWCODE:    load = PRGLow,  type = ro;
    COLLISION:  load = PRGLow, type = ro;

    RENDER:     load = PRGFix,  type = ro;
    FIXED:      load = PRGFix,  type = ro;
    
    
    VECTORS:    load = PRGFix, type = ro,  start = $fffa;

    CHR:        load = CHR,     type = ro;
    # CHREDIT:    load = CHR,     type = overwrite, start = $0710;
}
