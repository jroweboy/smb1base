MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "";
    SHORTRAM:   start = $0100,  size = $00a0, type = rw, file = "";
    IRQCODE:    start = $01a0,  size = $0020, type = rw, file = "";
    STACK:      start = $01c0,  size = $0040, type = rw, file = "";
    OAM:    start = $0200,  size = $0100, type = rw, file = "";
    RAM1:    start = $0300,  size = $0200, type = rw, file = "";
    RAM2:    start = $0500,  size = $0300, type = rw, file = "";
    BUF:    start = $6000,  size = $0100, type = rw, file = "";
    SRAM:   start = $6100,  size = $1f00, type = rw, file = "";
    HDR:    start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;

    # TODO think of a system to define the banks in code?
    # Define new memory banks here
    # PRGLow: start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 0;
    # PRG_A0: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 1;
    # PRG_C0: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 2;
    # PRGLast:start = $e000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = 3;


#panic banks
    PRGC_00:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $00;
    PRGC_01:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $01;
    PRGC_02:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $02;
    PRGC_03:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $03;
    PRGC_04:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $04;
    PRGC_05:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $05;
    PRGC_06:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $06;
    PRGC_07:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $07;
    PRGC_08:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $08;
    PRGC_09:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $09;
    PRGC_0a:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0a;
    PRGC_0b:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0b;
    PRGC_0c:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0c;
    PRGC_0d:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0d;
    PRGC_0e:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0e;
    PRGC_0f:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0f;
    PRGC_10:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $10;
    PRGC_11:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $11;
    PRGC_12:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $12;
    PRGC_13:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $13;
    PRGC_14:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $14;
    PRGC_15:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $15;
    PRGC_16:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $16;
    PRGC_17:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $17;
    PRGC_18:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $18;
    PRGC_19:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $19;
    PRGC_1a:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $1a;
    PRGC_1b:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $1b;
    PRGC_1c:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $1c;
    PRGC_1d:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $1d;
    PRGC_1e:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $1e;
    PRGC_1f:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $1f;
    PRGC_20:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $20;
    PRGC_21:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $21;
    PRGC_22:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $22;
    PRGC_23:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $23;

# regular code banks
    PRGA_24:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $24;
    PRGA_25:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $25;
    PRGA_26:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $26;
    PRGA_27:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $27;
    PRGA_28:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $28;
    PRGA_29:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $29;
    PRGA_2a:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $2a;


    # unused for now
    PRGA_2b:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $2b;
    PRGA_2c:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $2c;
    PRGA_2d:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $2d;
    PRGA_2e:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $2e;
    PRGA_2f:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $2f;
    PRGA_30:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $30;
    PRGA_31:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $31;
    PRGA_32:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $32;
    PRGA_33:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $33;
    PRGA_34:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $34;
    PRGA_35:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $35;
    PRGA_36:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $36;
    PRGA_37:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $37;
    PRGA_38:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $38;
    PRGA_39:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $39;
    
    # Reserved for DPCM samples
    DPCM_00:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $3a;
    DPCM_01:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $3b;
    DPCM_02:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $3c;

    # store the unrolled ssdpcm decoder here
    PRG8_01:start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $3d;

    PRGLow: start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $3e;
    PRGFix: start = $e000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $3f;

    # Pad the CHR up to the next power of two ($20000)
    CHR:    start = $0000,  size = $20000, type = ro, fill = yes, file = %O, fillval = $00;
}

SEGMENTS {
    INESHDR:    load = HDR,     type = ro;
    ZEROPAGE:   load = ZP,      type = zp;
    SHORTRAM:   load = SHORTRAM,type = bss;
    STACK:      load = STACK,   type = bss;
    OAM:        load = OAM,     type = bss;
    BSS:        load = RAM1,    type = bss;
    BSS2:       load = RAM2,    type = bss;
    WRAM:       load = SRAM,    type = bss;
    SAMPLE_BUF: load = SRAM,    type = bss;

    DECODE_UNROLL:  load = PRG8_01,        type = ro, align = $100, optional = yes;
    DECODE:         load = PRG8_01,        type = ro;
    DECODE_TABLES:  load = PRG8_01,        type = ro, align = $100;
    PLAYBACK_CODE:  load = PRGFix,  type = rw, run = IRQCODE, define = yes;

    # User created code defaults to the first A0 bank
    OBJECT:     load = PRGA_24, type = ro;
    PLAYER:     load = PRGA_25, type = ro;
    MUSIC:      load = PRGA_26, type = ro;
    LEVEL:      load = PRGA_27, type = ro;
    TITLE:      load = PRGA_28, type = ro;
    MUSIC_DRIVER:load = PRGA_28, run = SRAM, type = rw, define = yes;
    TITLE_MUSIC:load = PRGA_29, type = ro;

    DPCM_00:    load = DPCM_00, type = ro, define=yes, optional=yes;
    DPCM_01:    load = DPCM_01, type = ro, define=yes, optional=yes;
    DPCM_02:    load = DPCM_02, type = ro, define=yes, optional=yes;
    # DPCM_03:    load = PRGC_03, type = ro, define=yes;
    # DPCM_04:    load = PRGC_04, type = ro, define=yes;
    # DPCM_05:    load = PRGC_05, type = ro, define=yes;
    # DPCM_06:    load = PRGC_06, type = ro, define=yes;
    # DPCM_07:    load = PRGC_07, type = ro, define=yes;
    # DPCM_08:    load = PRGC_08, type = ro, define=yes;
    # DPCM_09:    load = PRGC_09, type = ro, define=yes;
    # DPCM_0a:    load = PRGC_0a, type = ro, define=yes;
    # TITLE_DPCM: load = PRGC_0b, type = ro, define=yes, align=64;


    BANK_00:    load = PRGC_00, type = ro, define=yes;
    BANK_01:    load = PRGC_01, type = ro, define=yes;
    BANK_02:    load = PRGC_02, type = ro, define=yes;
    BANK_03:    load = PRGC_03, type = ro, define=yes;
    BANK_04:    load = PRGC_04, type = ro, define=yes;
    BANK_05:    load = PRGC_05, type = ro, define=yes;
    BANK_06:    load = PRGC_06, type = ro, define=yes;
    BANK_07:    load = PRGC_07, type = ro, define=yes;
    BANK_08:    load = PRGC_08, type = ro, define=yes;
    BANK_09:    load = PRGC_09, type = ro, define=yes;
    BANK_0a:    load = PRGC_0a, type = ro, define=yes;
    BANK_0b:    load = PRGC_0b, type = ro, define=yes;
    BANK_0c:    load = PRGC_0c, type = ro, define=yes;
    BANK_0d:    load = PRGC_0d, type = ro, define=yes;
    BANK_0e:    load = PRGC_0e, type = ro, define=yes;
    BANK_0f:    load = PRGC_0f, type = ro, define=yes;
    BANK_10:    load = PRGC_10, type = ro, define=yes;
    BANK_11:    load = PRGC_11, type = ro, define=yes;
    BANK_12:    load = PRGC_12, type = ro, define=yes;
    BANK_13:    load = PRGC_13, type = ro, define=yes;
    BANK_14:    load = PRGC_14, type = ro, define=yes;
    BANK_15:    load = PRGC_15, type = ro, define=yes;
    BANK_16:    load = PRGC_16, type = ro, define=yes;
    BANK_17:    load = PRGC_17, type = ro, define=yes;
    BANK_18:    load = PRGC_18, type = ro, define=yes;
    BANK_19:    load = PRGC_19, type = ro, define=yes;
    BANK_1a:    load = PRGC_1a, type = ro, define=yes;
    BANK_1b:    load = PRGC_1b, type = ro, define=yes;
    BANK_1c:    load = PRGC_1c, type = ro, define=yes;
    BANK_1d:    load = PRGC_1d, type = ro, define=yes;
    BANK_1e:    load = PRGC_1e, type = ro, define=yes;
    BANK_1f:    load = PRGC_1f, type = ro, define=yes;
    BANK_20:    load = PRGC_20, type = ro, define=yes;
    BANK_21:    load = PRGC_21, type = ro, define=yes;
    BANK_22:    load = PRGC_22, type = ro, define=yes;
    BANK_23:    load = PRGC_23, type = ro, define=yes;

    CODE:       load = PRGLow, type = ro;
    LOWCODE:    load = PRGLow, type = ro;
    COLLISION:  load = PRGLow, type = ro;

    RENDER:     load = PRGFix, type = ro;
    FIXED:      load = PRGFix, type = ro;

    HDRS:       load = PRGFix, type = ro;
    
    
    VECTORS:    load = PRGFix, type = ro,  start = $fffa;

    # CHR_ROTATE:         load = CHR,     type = ro, start = $00;
    CHR_ORIGINAL:       load = CHR,     type = ro, start = $0000;
    CHR_TITLE_BG_0:     load = CHR,     type = ro, start = $2000;
    CHR_TITLE_BG_1:     load = CHR,     type = ro, start = $3000;
    CHR_TITLE_BG_2:     load = CHR,     type = ro, start = $4000;
    CHR_TITLE_SPRITE:   load = CHR,     type = ro, start = $4800;
}
